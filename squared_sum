/read the first ASCII symbol
INP1, 	SKI     	/skip if input flag is set
    	BUN INP1	/loop until input flag is set
    	INP       	/read a character from the input reg
	ADD NZR   	/add -30 hex (subtract 30 hex)
	STA REGA 	/store value into REGA
	LDA REGA	/load REGA
	ADD ZR   	/add -'0'
    	STA REGB 	/store value into REGA
	CLA       	/clear the accumulator
/read the second ASCII symbol
INP2, 	SKI     	/skip if input flag is set
    	BUN INP2	/loop until input flag is set
    	INP       	/read a character from the input reg
	ADD NZR   	/add -30 hex (subtract 30 hex)
	ADD ZR   	/add -'0'
    	STA REGA 	/store value into REGA
    	CLA       	/clear the accumulator
/convert the two digit ASCII input into a two digit number
MULT, 	CLE		/clear the extended bit of accumulator
	LDA MLP		/load the multiplier (10)
	CIR		/circular right shift of multiplier
	STA MLP		/store the shifted multiplier
	SZE		/skip to next instruction, if bit E=0
	BUN ONE		/if E=1, go to ONE
	BUN ZERO	/if E=0, go to ZERO
ONE,	LDA REGB	/load the multiplicand
	ADD PRTL	/add to partial product
	STA PRTL	/store partial product
	CLE		/clear E
ZERO,	LDA REGB	/load the multiplicand
	CIL		/circular left shift of multiplicand
	STA REGB	/store shifted multiplicant
	ISZ CNTR	/counter increment
	BUN MULT	/repeat loop until counter=0
	LDA PRTL	/load the product
	STA REGB	/store the product to REGB
	LDA REGB	/load REGB
	ADD REGA	/add REGA
	STA REGB	/store the result 	
/compute the sum
SUM, 	LDA REGC	/load REGC
	STA MLP2	/MLP2=REGC
	LDA REGC	/load REGC
	STA MLPC	/MLPC=REGC
	LDA CNTR2	/load CNTR2
	STA CNTR	/CNTR=CNTR2
	LDA PRTL2	/load CNTR2
	STA PRTL	/CNTR=CNTR2
SQR, 	CLE		/clear the extended bit of accumulator
	LDA MLP2	/load the multiplier
	CIR		/circular right shift of multiplier
	STA MLP2	/store the shifted multiplier
	SZE		/skip to next instruction, if bit E=0
	BUN ONE1	/if E=1, go to ONE
	BUN ZERO1	/if E=0, go to ZERO
ONE1,	LDA MLPC	/load the multiplicand
	ADD PRTL	/add to partial product
	STA PRTL	/store partial product
	CLE		/clear E
ZERO1,	LDA MLPC	/load the multiplicand
	CIL		/circular left shift of multiplicand
	STA MLPC	/store shifted multiplicant
	ISZ CNTR	/counter increment
	BUN SQR		/repeat loop until counter=0
	LDA PRTL	/load the product
	STA REGE	/store the product to REGE
	LDA REGD	/load REGDA
	ADD REGE	/add REGE
	STA REGD	/store the sum
	ISZ REGC	/counter increment
	LDA REGC	/load REGC as subtrahend
	CMA		/complement subtrahend
	INC		/increment subtrahend
	ADD REGB	/add REGC as minuend
	STA DIF		/store difference
	SNA		/skip next instruction if REGC>REGB
	BUN SUM		/repeat loop until REGC>REGB
	HLT        	/halt the program
/declare variables
REGA, DEC 0
REGB, DEC 0
NZR, HEX -30
PZR, HEX 30
ZR, DEC -0
MLP, DEC 10
PRTL, DEC 0
CNTR, DEC -8
REGC, DEC 0
DIF, DEC 0
MLP2, DEC 0
MLPC, DEC 0
CNTR2, DEC -8
PRTL2, DEC 0
REGE, DEC 0
REGD, DEC 0
END
